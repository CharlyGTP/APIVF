# -*- coding: utf-8 -*-
"""GGWP

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11lwrM9qyHVXNlr6BfANSxTuwXCUmO0cD
"""

import requests
import pandas as pd
import json

url_ngrok = "https://6a3b-187-150-56-64.ngrok.io/ventas"
response = requests.get(url_ngrok)
if response.status_code == 200:
    contenido_json = response.text
    datos = json.loads(contenido_json)
    df = pd.DataFrame(datos)
    df.to_excel("ventas.xlsx", index=False)

    print("Datos guardados en datos.xlsx")
else:
    print("Error al obtener los datos de la API:", response.status_code)

import requests
import pandas as pd
import json

url_ngrok = "https://6a3b-187-150-56-64.ngrok.io/productos"
response = requests.get(url_ngrok)
if response.status_code == 200:
    contenido_json = response.text
    datos = json.loads(contenido_json)
    df = pd.DataFrame(datos)
    df.to_excel("productos.xlsx", index=False)

    print("Datos guardados en datos.xlsx")
else:
    print("Error al obtener los datos de la API:", response.status_code)

import requests
import pandas as pd
import json

url_ngrok = " https://99ab-187-150-56-64.ngrok.io/usuarios"
response = requests.get(url_ngrok)
if response.status_code == 200:
    contenido_json = response.text
    datos = json.loads(contenido_json)
    df = pd.DataFrame(datos)
    df.to_excel("usuarios.xlsx", index=False)

    print("Datos guardados en datos.xlsx")
else:
    print("Error al obtener los datos de la API:", response.status_code)

import requests
import pandas as pd
import json

url_ngrok = "https://6a3b-187-150-56-64.ngrok.io/roles"
response = requests.get(url_ngrok)
if response.status_code == 200:
    contenido_json = response.text
    datos = json.loads(contenido_json)
    df = pd.DataFrame(datos)
    df.to_excel("roles.xlsx", index=False)

    print("Datos guardados en datos.xlsx")
else:
    print("Error al obtener los datos de la API:", response.status_code)

import requests
import pandas as pd
from collections import defaultdict
from decimal import Decimal

# URLs de las APIs
url_api_ventas = 'https://3a01-187-150-56-64.ngrok.io/ventas'
url_api_productos = 'https://3a01-187-150-56-64.ngrok.io/productos'

# Realizar solicitudes a las APIs
response_ventas = requests.get(url_api_ventas)
response_productos = requests.get(url_api_productos)

# Verificar el estado de las respuestas
if response_ventas.status_code == 200 and response_productos.status_code == 200:
    # Convertir las respuestas a JSON
    data_ventas = response_ventas.json()
    data_productos = response_productos.json()

    # Crear DataFrames con los datos
    df_ventas = pd.DataFrame(data_ventas)
    df_productos = pd.DataFrame(data_productos)

    # Inicializar una variable para almacenar la suma total de ventas
    suma_total_ventas = Decimal(0)

    # Supongamos que las API devuelven listas de ventas y productos con campos "id_producto", "cantidad" y "precio"
    for venta in data_ventas:
        id_producto = venta.get('id_producto', 0)
        cantidad_venta = int(venta.get('cantidad', 0))
        precio_producto = Decimal([producto['precio'] for producto in data_productos if producto['id_producto'] == id_producto][0])
        total_venta = cantidad_venta * precio_producto

        # Acumular la venta en la suma total
        suma_total_ventas += total_venta

    # Convertir el total de ventas a un número entero
    suma_total_ventas = int(suma_total_ventas)

    # Encontrar la categoría más vendida
    id_categoria_mas_vendida = df_productos['id_producto'].value_counts().idxmax()
    nombre_categoria_mas_vendida = df_productos.loc[df_productos['id_producto'] == id_categoria_mas_vendida, 'nombre_categoria'].values[0]

    # Encontrar el producto más vendido
    productos_vendidos = defaultdict(int)
    for venta in data_ventas:
        id_producto = venta['id_producto']
        cantidad_vendida = venta['cantidad']
        nombre_producto = df_productos.loc[df_productos['id_producto'] == id_producto, 'nombre_producto'].values[0]
        productos_vendidos[nombre_producto] += cantidad_vendida

    producto_mas_vendido = max(productos_vendidos, key=productos_vendidos.get)
    cantidad_mas_vendida = productos_vendidos[producto_mas_vendido]

    # Mostrar resultados
    print(f'Ingreso total de todas las ventas: $ {suma_total_ventas} pesos')
    print("Categoría más vendida:", nombre_categoria_mas_vendida)
    print(f'El producto más vendido es "{producto_mas_vendido}" con {cantidad_mas_vendida} unidades vendidas.')

    # Guardar los resultados en un archivo CSV
    resultados = {
        'Ingreso Total': [suma_total_ventas],
        'Categoría Más Vendida': [nombre_categoria_mas_vendida],
        'Producto Más Vendido': [f'{producto_mas_vendido} ({cantidad_mas_vendida} unidades vendidas)']
    }

    df_resultados = pd.DataFrame(resultados)
    df_resultados.to_csv('resultados_ventas.csv', index=False)
else:
    print("Error al obtener datos de las APIs")

import requests
import pandas as pd

# URLs de las APIs
url_api_ventas = 'https://3a01-187-150-56-64.ngrok.io/ventas'
url_api_usuarios = 'https://3a01-187-150-56-64.ngrok.io/usuarios'

# Hacer solicitudes a las APIs
response_ventas = requests.get(url_api_ventas)
response_usuarios = requests.get(url_api_usuarios)

# Verificar el estado de las respuestas
if response_ventas.status_code == 200 and response_usuarios.status_code == 200:
    # Convertir las respuestas a JSON
    data_ventas = response_ventas.json()
    data_usuarios = response_usuarios.json()

    # Crear DataFrames con los datos
    df_ventas = pd.DataFrame(data_ventas)
    df_usuarios = pd.DataFrame(data_usuarios)

    # Encontrar el usuario que más ha gastado
    usuario_mas_gastador = df_ventas.groupby('id_usuario')['cantidad'].sum().idxmax()

    # Calcular el promedio de gasto por usuario
    promedio_gasto_por_usuario = df_ventas.groupby('id_usuario')['cantidad'].mean().mean()

    # Calcular cuántos productos compra un usuario en promedio
    promedio_productos_por_usuario = df_ventas.groupby('id_usuario')['id_producto'].nunique().mean()

    # Mostrar resultados
    print("Usuario que más ha gastado:", usuario_mas_gastador)
    print("Promedio de gasto por usuario:", promedio_gasto_por_usuario)
    print("Cantidad promedio de productos comprados por usuario:", promedio_productos_por_usuario)

    # Guardar los resultados en un archivo Excel
    resultados = {
        'Usuario Más Gastador': [usuario_mas_gastador],
        'Promedio Gasto por Usuario': [promedio_gasto_por_usuario],
        'Promedio Productos por Usuario': [promedio_productos_por_usuario]
    }

    df_resultados = pd.DataFrame(resultados)
    df_resultados.to_excel('resultados_usuarios.xlsx', index=False)
else:
    print("Error al obtener datos de las APIs")

import requests
import pandas as pd

# URL de la API de productos
url_api_productos = 'https://3a01-187-150-56-64.ngrok.io/productos'

# Hacer solicitud a la API de productos
response_productos = requests.get(url_api_productos)

# Verificar el estado de la respuesta
if response_productos.status_code == 200:
    # Convertir la respuesta a JSON
    data_productos = response_productos.json()

    # Crear un DataFrame con los datos de productos
    df_productos = pd.DataFrame(data_productos)

    # Convertir la columna 'precio' a tipo numérico
    df_productos['precio'] = df_productos['precio'].astype(float)

    # Encontrar el producto más caro
    producto_mas_caro = df_productos.loc[df_productos['precio'].idxmax()]['nombre_producto']

    # Encontrar el producto más barato
    producto_mas_barato = df_productos.loc[df_productos['precio'].idxmin()]['nombre_producto']

    # Calcular el promedio de precios de los productos
    promedio_precios = df_productos['precio'].mean()

    # Mostrar resultados
    print("Producto más caro:", producto_mas_caro)
    print("Producto más barato:", producto_mas_barato)
    print("Promedio de precios de los productos:", promedio_precios)

    # Guardar los resultados en un archivo Excel
    resultados = {
        'Producto Más Caro': [producto_mas_caro],
        'Producto Más Barato': [producto_mas_barato],
        'Promedio Precios de Productos': [promedio_precios]
    }

    df_resultados = pd.DataFrame(resultados)
    df_resultados.to_excel('resultados_productos.xlsx', index=False)
else:
    print("Error al obtener datos de la API de productos")

import requests
import pandas as pd

# URLs de las APIs
url_api_productos = 'https://3a01-187-150-56-64.ngrok.io/productos'

# Hacer solicitud a la API de productos
response_productos = requests.get(url_api_productos)

# Verificar el estado de la respuesta
if response_productos.status_code == 200:
    # Convertir la respuesta a JSON
    data_productos = response_productos.json()

    # Crear un DataFrame con los datos de productos
    df_productos = pd.DataFrame(data_productos)

    # Calcular cuántos productos están actualmente en stock
    productos_en_stock = df_productos['stock'].sum()

    # Encontrar el producto con menos stock
    producto_menos_stock = df_productos.loc[df_productos['stock'].idxmin(), 'nombre_producto']

    # Manejar el caso de un nombre de producto nulo o vacío
    if pd.isna(producto_menos_stock) or producto_menos_stock == "":
        producto_menos_stock = "N/A"

    # Calcular cuántos productos necesitan ser reabastecidos (stock bajo)
    productos_stock_bajo = df_productos[df_productos['stock'] < 10]['stock'].count()

    # Mostrar resultados
    print("Cantidad de productos en stock:", productos_en_stock)
    print("Producto con menos stock:", producto_menos_stock)
    print("Cantidad de productos que necesitan ser reabastecidos (stock bajo):", productos_stock_bajo)

    # Guardar los resultados en un archivo Excel
    resultados = {
        'Productos en Stock': [productos_en_stock],
        'Producto Menos Stock': [producto_menos_stock],
        'Productos Stock Bajo': [productos_stock_bajo]
    }

    df_resultados = pd.DataFrame(resultados)
    df_resultados.to_excel('resultados_inventario.xlsx', index=False)
else:
    print("Error al obtener datos de la API de productos")